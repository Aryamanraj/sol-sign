name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check for version bump needed
      id: check
      run: |
        # Get the last commit message
        LAST_COMMIT=$(git log -1 --pretty=%B)
        echo "Last commit: $LAST_COMMIT"
        
        # Skip if commit message contains [skip ci] or [skip release]
        if echo "$LAST_COMMIT" | grep -q "\[skip ci\]\|\[skip release\]"; then
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "Skipping release due to [skip ci] or [skip release] in commit message"
          exit 0
        fi
        
        # Check if this is a version bump commit (avoid infinite loop)
        if echo "$LAST_COMMIT" | grep -q "chore: bump version to"; then
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "Skipping release - this is a version bump commit"
          exit 0
        fi
        
        echo "should_release=true" >> $GITHUB_OUTPUT
    
    - name: Determine version bump type
      if: steps.check.outputs.should_release == 'true'
      id: version_type
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
        
        echo "Commits since $LAST_TAG:"
        echo "$COMMITS"
        
        # Determine bump type based on conventional commits
        if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!\|fix!"; then
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "Detected: MAJOR version bump"
        elif echo "$COMMITS" | grep -q "feat:"; then
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "Detected: MINOR version bump"
        elif echo "$COMMITS" | grep -q "fix:\|chore:\|docs:\|style:\|refactor:\|test:\|ci:"; then
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "Detected: PATCH version bump"
        else
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "Default: PATCH version bump"
        fi
    
    - name: Bump version
      if: steps.check.outputs.should_release == 'true'
      id: version
      run: |
        BUMP_TYPE="${{ steps.version_type.outputs.bump_type }}"
        echo "Bumping $BUMP_TYPE version..."
        
        npm version $BUMP_TYPE --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update CHANGELOG
      if: steps.check.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create changelog entry
        echo "## [$NEW_VERSION] - $DATE" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "### Changes" >> temp_changelog.md
        
        # Get commits since last tag for changelog
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Prepend to existing changelog
        if [ -f CHANGELOG.md ]; then
          tail -n +4 CHANGELOG.md >> temp_changelog.md
        fi
        mv temp_changelog.md CHANGELOG.md
    
    - name: Commit version bump
      if: steps.check.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git add package.json CHANGELOG.md
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
        git tag "v$NEW_VERSION"
        
        git push origin main
        git push origin "v$NEW_VERSION"
    
    - name: Create GitHub Release
      if: steps.check.outputs.should_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release v${{ steps.version.outputs.new_version }}
        body: |
          ## ðŸš€ Release v${{ steps.version.outputs.new_version }}
          
          ### ðŸ“¦ Installation
          ```bash
          npm install -g js-sol-sign
          ```
          
          ### ðŸ“‹ Changes
          See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
          
          ### ðŸ”§ CLI Commands
          ```bash
          js-sol-sign keypair --public-key-only
          js-sol-sign sign -m 'Your message' -k keypair.json
          js-sol-sign verify -m 'Your message' -s 'signature' -p 'public-key'
          ```
        draft: false
        prerelease: false
    
    - name: Publish to npm
      if: steps.check.outputs.should_release == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
